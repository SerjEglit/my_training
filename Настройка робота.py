from datetime import time

import emoji

print(emoji.emojize("Python is fun :snake:"))

# –í—ã–≤–æ–¥: Python is fun üêç

print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–±–æ—Ç–∞... üöÄ")


def task_status(status):
	icons = {"–≤—ã–ø–æ–ª–Ω–µ–Ω–æ": "‚úÖ", "–æ—à–∏–±–∫–∞": "‚ùå", "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ": "‚è≥"}
	return icons.get(status, "‚ùì")  # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω


print(f"–ó–∞–¥–∞—á–∞: {task_status('–≤—ã–ø–æ–ª–Ω–µ–Ω–æ')}")
print("üìä –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–æ–≤")
print("===================")
print("‚úÖ –¢–µ—Å—Ç 1: –ø—Ä–æ–π–¥–µ–Ω")
print("‚ùå –¢–µ—Å—Ç 2: –æ—à–∏–±–∫–∞")
print("===================")
print("üîö –ö–æ–Ω–µ—Ü —Ç–µ—Å—Ç–æ–≤")


# üì° –≠–≥–ª–∏—Ç –°–µ—Ä–≥–µ–π –ù–∏–∫–æ–ª–∞–µ–≤–∏—á, 54 –≥–æ–¥–∞. –ú–∏—Å—Å–∏—è: –Ω–∞—É—á–∏—Ç—å —Ä–æ–±–æ—Ç–∞ —Ä–∞–±–æ—Ç–∞—Ç—å, –∞ –Ω–µ –ª–µ–Ω–∏—Ç—å—Å—è.
# üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç—å—é –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –¥–≤–∏–∂–µ–Ω–∏—è.

def control_robot_arm(speed: float, direction: str) -> str:
	"""
	ü§ñ –£–ø—Ä–∞–≤–ª—è–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ–º —Ä–æ–±–æ—Ç–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —è—Å–Ω–æ—Å—Ç—å—é –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Ä–∏—Å–∫–∞–º–∏.

	:param speed: –°–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è (–≤ –º/—Å).
	:param direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è ('–≤–≤–µ—Ä—Ö', '–≤–Ω–∏–∑', '–≤–ª–µ–≤–æ', '–≤–ø—Ä–∞–≤–æ').
	:return: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.
	"""
	# ‚Äî‚Äî‚Äî –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Äî –∫—Ç–æ-—Ç–æ –≤–µ–¥—å –¥–æ–ª–∂–µ–Ω —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø–æ—Ä—è–¥–∫–æ–º
	valid_directions = ['–≤–≤–µ—Ä—Ö', '–≤–Ω–∏–∑', '–≤–ª–µ–≤–æ', '–≤–ø—Ä–∞–≤–æ']
	if direction not in valid_directions:
		return f"üí• –û—à–∏–±–∫–∞: –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ '{direction}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –†–æ–±–æ—Ç —Ç–µ—Ä—è–µ—Ç —Ç–µ—Ä–ø–µ–Ω–∏–µ!"

	# ‚Äî‚Äî‚Äî –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å ‚Äî –º–µ–¥–ª–µ–Ω–Ω–æ, –Ω–æ —É–≤–µ—Ä–µ–Ω–Ω–æ
	adjusted_speed = max(0.1, min(speed, 5.0))  # –í—Å—ë –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: –æ—Ç 0.1 –¥–æ 5.0 –º/—Å

	# ‚Äî‚Äî‚Äî –°–æ–æ–±—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã ‚Äî —Ä–æ–±–æ—Ç –ª—é–±–∏—Ç –≥–æ–≤–æ—Ä–∏—Ç—å
	return f"‚úÖ –î–≤–∏–∂–µ–Ω–∏–µ: {direction}. –°–∫–æ—Ä–æ—Å—Ç—å: {adjusted_speed} –º/—Å. –•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞, –≠–≥–ª–∏—Ç!"


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
print(control_robot_arm(3.5, '–≤–≤–µ—Ä—Ö'))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
print(control_robot_arm(0, '–Ω–µ–ø–æ–Ω—è—Ç–Ω–æ'))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ


def test_robot_logic():
	"""
	üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–∑–≥–∏ —Ä–æ–±–æ—Ç–∞ ‚Äî –ø—É—Å—Ç—å –¥–æ–∫–∞–∂–µ—Ç —Å–≤–æ—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.
	"""
	print("üîç –ù–∞—á–∞–ª–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π –≠–≥–ª–∏—Ç-–ë–æ—Ç–∞ 3000:\n")

	# ‚Äî‚Äî‚Äî –°–ø–∏—Å–æ–∫ –∏—Å–ø—ã—Ç–∞–Ω–∏–π
	test_cases = [
		{"speed": 2.5, "direction": "–≤–ø—Ä–∞–≤–æ", "expected": "‚úÖ"},
		{"speed": 0, "direction": "–≤–≤–µ—Ä—Ö", "expected": "‚úÖ"},
		{"speed": 6.0, "direction": "–≤–ª–µ–≤–æ", "expected": "‚úÖ"},
		{"speed": 3.2, "direction": "–≤–ø–µ—Ä–µ–¥", "expected": "üí•"}
	]

	# ‚Äî‚Äî‚Äî –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
	for i, test in enumerate(test_cases, 1):
		print(f"‚öôÔ∏è –¢–µ—Å—Ç #{i}: –°–∫–æ—Ä–æ—Å—Ç—å {test['speed']}, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ '{test['direction']}'")
		result = control_robot_arm(test["speed"], test["direction"])
		status = "‚úÖ –£—Å–ø–µ—Ö" if test["expected"] in result else "‚ùå –ü—Ä–æ–≤–∞–ª"
		print(f"üîπ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result} | {status}\n")

	print("üìå –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –í—ã–¥–µ—Ä–∂–∫–∞ —Ä–æ–±–æ—Ç–∞ –¥–æ–∫–∞–∑–∞–Ω–∞!\n")


# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
test_robot_logic()
