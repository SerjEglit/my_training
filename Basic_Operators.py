# Шпаргалка по темам из Модуля 2. Основные операторы:
"""
    Цели и задачи. Поток выполнения программы. Как интерпретатор показывает переменные.
    •	Цели и задачи: Цель программы — выполнить определенные операции с данными, например,
    вычисления или вывод информации. Задачи могут быть разделены на шаги (например, ввод данных, обработка и вывод результата).
    •	Поток выполнения программы: Программа выполняется по строкам сверху вниз, пока не встретится инструкция,
    которая изменяет этот поток (например, условия, циклы или вызовы функций).
    •	Как интерпретатор показывает переменные: Когда интерпретатор встречает переменную, он пытается найти ее значение в памяти.
    Если переменная не определена, возникает ошибка.
        """
# Условная конструкция. Операторы if, elif, else
# Условные операторы используются для выполнения различных действий в зависимости от условий.
# - if условие: - код, если условие истинно
# - elif другое_условие: - код, если условие в elif истинно
# - else: - код, если все условия ложны
# Пример:
age = 18
if age < 18:
	print("Меньше 18 лет")
elif age == 18:
	print("18 лет")
else:
	print("Больше 18 лет")
"""
Стиль кода
В Python следование стандартам стиля кода важно для читабельности. Рекомендуется придерживаться PEP 8.
•	Отступы: Используйте 4 пробела для отступов.
Имена переменных: Используйте snake_case для переменных и функций, а также PascalCase для классов.
•	Комментарии: Пишите комментарии, которые объясняют код, но не избыточные.
Используйте # для однострочных комментариев и ''' ''' или """ """ для многострочных.
       """

# Цикл While
# Цикл while выполняет блок кода, пока условие истинно.
#  - while - условие: - код, который выполняется, пока условие истинно
# Пример:
count = 0
while count < 5:
	print(count)
	count += 1

# Цикл for
# Цикл for используется для перебора элементов коллекций (списков, строк, диапазонов и т.д.).
#  - for элемент in коллекция: - код, выполняющийся для каждого элемента
# Пример:
for i in range(3):
	print(i)

# Цикл for. Элементы списка. Полезные функции в цикле
# •	Элементы списка: При использовании цикла for можно пройтись по элементам списка.
my_list = [1, 2, 3, 4]
for item in my_list:
	print(item)

# Полезные функции:
# - enumerate(): для получения индекса и значения элемента.
for index, value in enumerate(my_list):
	print(index, value)
# - zip(): для итерации по нескольким коллекциям одновременно.
list1 = [1, 2, 3]
list2 = ['a', 'b', 'c']
for a, b in zip(list1, list2):
	print(a, b)


# Функции в Python. Функция с параметром. Документирование функции.
#  - Функции с параметрами: код функции.
#  - def function_name(parameter1, parameter2): # код функции

# Пример:
def greet(name):
	print(f"Привет, {name}!")


greet("Алиса")


# Документирование функции: Используйте строку документации (docstring) для описания функционала функции.
def greet(name):
	"""
		Функция выводит приветствие с именем.
		:param name: Имя для приветствия.
		"""


# print(f"Привет, {name}!")


# Функции в Python. Функция с параметром
#	Функция с параметром: Функции могут принимать параметры (аргументы), которые могут быть использованы внутри функции.
def add(a, b):
	return a + b


result = add(3, 5)
print(result)  # 8
#	Передача значений: Аргументы передаются в функцию по значению (для неизменяемых типов) или по ссылке (для изменяемых типов).
