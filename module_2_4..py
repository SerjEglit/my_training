# –ó–∞–¥–∞—á–∞: –°–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø–∏—Å–∫–∏ –ø—Ä–æ—Å—Ç—ã—Ö –∏ –Ω–µ –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª –∏–∑ numbers

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

# üîß –ü—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
primes = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª
not_primes = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö —á–∏—Å–µ–ª

# üåê –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –≤—Å–µ–º —á–∏—Å–ª–∞–º –≤ numbers
for number in numbers:  # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —á–∏—Å–ª—É –∏–∑ —Å–ø–∏—Å–∫–∞ numbers
	# üîí –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è-—Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –ø—Ä–æ—Å—Ç–æ—Ç—É
	is_prime = True  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —á–∏—Å–ª–æ –ø—Ä–æ—Å—Ç–æ–µ

	# üìÄ –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π –¥–ª—è 1
	if number <= 1:  # –ï—Å–ª–∏ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 1, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
		continue

	# üîÑ –ü–æ–∏—Å–∫ –¥–µ–ª–∏—Ç–µ–ª–µ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 2 –¥–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –∫–æ—Ä–Ω—è —á–∏—Å–ª–∞ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
	for divisor in range(2, int(number ** 0.5) + 1):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–ª–∏–º–æ—Å—Ç—å –Ω–∞ —á–∏—Å–ª–∞ –æ—Ç 2 –¥–æ sqrt(number)
		if number % divisor == 0:  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –¥–µ–ª–∏—Ç–µ–ª—å, —á–∏—Å–ª–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ–µ
			is_prime = False  # –ú–µ–Ω—è–µ–º —Ñ–ª–∞–≥ –Ω–∞ False
			break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, –¥–∞–ª—å–Ω–µ–π—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞

	# ‚úÖ –û—Ç–Ω–æ—Å–∏–º —á–∏—Å–ª–æ –∫ —Å–ø–∏—Å–∫—É primes –∏–ª–∏ not_primes
	if is_prime:  # –ï—Å–ª–∏ —Ñ–ª–∞–≥ –æ—Å—Ç–∞–ª—Å—è True, —á–∏—Å–ª–æ –ø—Ä–æ—Å—Ç–æ–µ
		primes.append(number)  # –î–æ–±–∞–≤–ª—è–µ–º —á–∏—Å–ª–æ –≤ —Å–ø–∏—Å–æ–∫ primes
	else:  # –ï—Å–ª–∏ —Ñ–ª–∞–≥ —Å—Ç–∞–ª False, —á–∏—Å–ª–æ —Å–æ—Å—Ç–∞–≤–Ω–æ–µ
		not_primes.append(number)  # –î–æ–±–∞–≤–ª—è–µ–º —á–∏—Å–ª–æ –≤ —Å–ø–∏—Å–æ–∫ not_primes

# üåü –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
print(f"Primes: {primes}")  # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª
print(f"Not Primes: {not_primes}")  # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö —á–∏—Å–µ–ª

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
# –ó–∞–¥–∞—á–∞: –°–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø–∏—Å–∫–∏ –ø—Ä–æ—Å—Ç—ã—Ö –∏ –Ω–µ –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª –∏–∑ numbers

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –ø—Ä–æ—Å—Ç—ã–º
def is_prime_number(number):
	if number <= 1:
		return False  # 1 –∏ –º–µ–Ω—å—à–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º–∏ —á–∏—Å–ª–∞–º–∏
	for divisor in range(2, int(number ** 0.5) + 1):
		if number % divisor == 0:
			return False  # –ù–∞–π–¥–µ–Ω –¥–µ–ª–∏—Ç–µ–ª—å, —á–∏—Å–ª–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ–µ
	return True  # –ß–∏—Å–ª–æ –ø—Ä–æ—Å—Ç–æ–µ


# üîß –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
primes = [num for num in numbers if is_prime_number(num)]  # –ü—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞
not_primes = [num for num in numbers if num > 1 and not is_prime_number(num)]  # –°–æ—Å—Ç–∞–≤–Ω—ã–µ —á–∏—Å–ª–∞

# üåü –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
print(f"Primes: {primes}")  # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª
print(f"Not Primes: {not_primes}")  # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö —á–∏—Å–µ–ª
